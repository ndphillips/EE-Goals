{
    "collab_server" : "",
    "contents" : "# issue #3 \n# Contrast 2 simple heuristic choice models.\n#\n# Always select high sample mean option\n# Select option favored by RSF\n#\n# For each participant at each trial, calculate the prediction from each model \n# and compare to the participant's actual choice.\n#\n#    In what percent of trials do models 1 and 2 differ in their predictions?\n#    For how many participants does model 2 outperform model 1?\n#    Does model 2 outperform model 1 when people are closer to the goal?\n\nlibrary(yarrr)\nl.cols <- piratepal(palette = 'basel', trans = .6)\nl.cols.m <- piratepal(palette = 'basel', trans = .1)\n\ndf.trial <- readRDS(\"data/dataTrialLevelPGetthere.rds\")\n\nsel.RSF <- NULL\nsel.high.samp.mean <- NULL\n\n# first create vectors with predictions of options to choose from\nfor (ii in 1:nrow(df.trial)){\n  \n  RSF.i <- which(c(df.trial$p.getthere.1.subj[ii], df.trial$p.getthere.2.subj[ii],\n                   df.trial$p.getthere.3.subj[ii]) == max(c(df.trial$p.getthere.1.subj[ii],\n                                                            df.trial$p.getthere.2.subj[ii],\n                                                            df.trial$p.getthere.3.subj[ii])))\n  \n  samp.mean.i <- which(c(df.trial$subj.mean.1[ii], df.trial$subj.mean.2[ii],\n                         df.trial$subj.mean.3[ii]) == max(c(df.trial$subj.mean.1[ii],\n                                                            df.trial$subj.mean.2[ii],\n                                                            df.trial$subj.mean.3[ii])))\n  \n  sel.RSF <- c(sel.RSF, sample(ifelse(length(RSF.i) > 0, RSF.i, 0), 1))\n  \n  sel.high.samp.mean<- c(sel.high.samp.mean, sample(ifelse(length(samp.mean.i) > 0, samp.mean.i, 0), 1))\n}\n\n# save the predictions from the three theories\ndf.trial$sel.RSF <- sel.RSF\ndf.trial$sel.high.samp.mean <- sel.high.samp.mean\ndf.trial$sel.high.EV <- 1\n\n# in what percent of trials do models 1 and 2 (and high EV,i.e. model 3) differ\nmean(df.trial$sel.RSF != df.trial$sel.high.samp.mean)\nmean(df.trial$sel.RSF != df.trial$sel.high.EV)\nmean(df.trial$sel.high.EV != df.trial$sel.high.samp.mean)\n\n# ----------------------------\n# For how many participants does model 2 outperform model 1?\n# ----------------------------\n\n# create variable with proportion of correct predictions\nRSF.df <- aggregate(sel.RSF == selection ~ participant + condition, FUN = mean, data = df.trial)\nhigh.samp.mean.df <- aggregate(sel.high.samp.mean == selection ~ participant + condition,\n                               FUN = mean, data = df.trial)\nsel.high.EV.df <- aggregate(sel.high.EV == selection ~ participant + condition,\n                            FUN = mean, data = df.trial)\n\n# save all in one dataframe\nnames(RSF.df)[3] <- \"RSF.acc\"\nRSF.df$high.samp.mean.acc <- high.samp.mean.df$`sel.high.samp.mean == selection`\nRSF.df$high.EV.acc <- sel.high.EV.df$`sel.high.EV == selection`\n\n# check the proportion of RSF outperforming the select high sample mean option rule\nwith(RSF.df, mean(RSF.acc > high.samp.mean.acc))\naggregate(RSF.acc > high.samp.mean.acc ~ condition, FUN = mean, data = RSF.df)\n\n# check the proportion of RSF outperforming the select high EV option rule\nwith(RSF.df, mean(RSF.acc > high.EV.acc))\naggregate(RSF.acc > high.EV.acc ~ condition, FUN = mean, data = RSF.df)\n\n# Does model 2 (RSF) outperform model 1 (high sample mean) when people are closer to the goal?\n\n# create variable with proportion of correct predictions\nRSF.df.g <- aggregate(sel.RSF == selection ~ participant + condition, FUN = mean,\n                      data = subset(df.trial, trial >= 40))\nhigh.samp.mean.df <- aggregate(sel.high.samp.mean == selection ~ participant + condition,\n                               FUN = mean, data = subset(df.trial, trial >= 40))\nsel.high.EV.df <- aggregate(sel.high.EV == selection ~ participant + condition,\n                            FUN = mean, data = subset(df.trial, trial >= 40))\n# save all in one dataframe\nnames(RSF.df.g)[3] <- \"RSF.acc\"\nRSF.df.g$high.samp.mean.acc <- high.samp.mean.df$`sel.high.samp.mean == selection`\nRSF.df.g$high.EV.acc <- sel.high.EV.df$`sel.high.EV == selection`\n\n# check the proportion of RSF outperforming the select high sample mean option rule\nwith(RSF.df.g, mean(RSF.acc > high.samp.mean.acc))\naggregate(RSF.acc > high.samp.mean.acc ~ condition, FUN = mean, data = RSF.df.g)\n\n# check the proportion of RSF outperforming the select high EV option rule\nwith(RSF.df.g, mean(RSF.acc > high.EV.acc))\naggregate(RSF.acc > high.EV.acc ~ condition, FUN = mean, data = RSF.df.g)\n\n# let's use a sliding window approach\n\n# define window size and prepare vectors\nw.size <- 6\nRSF.p <- NULL\nsamp.mean.p <- NULL\nEV.p <- NULL\nfor (jj in 1:nrow(df.trial)){\n  \n  # for the first w.size trials don't compute anything\n  if(df.trial$trial[jj] < w.size + 1){\n    RSF.p <- c(RSF.p, NA)\n    samp.mean.p <- c(samp.mean.p, NA)\n    EV.p <- c(EV.p, NA)\n    \n  } else {\n    \n    # for the other trials compute the proportion of correct predictions\n    RSF.p <- c(RSF.p, mean(df.trial$sel.RSF[(jj - w.size): jj] == df.trial$selection[(jj - w.size): jj]))\n    samp.mean.p <- c(samp.mean.p, mean(df.trial$sel.high.samp.mean[(jj - w.size): jj] ==\n                                         df.trial$selection[(jj - w.size): jj]))\n    EV.p <- c(EV.p, mean(df.trial$sel.high.EV[(jj - w.size): jj] ==\n                           df.trial$selection[(jj - w.size): jj]))\n  }\n}\n\ndf.trial$RSF.p <- RSF.p\ndf.trial$samp.mean.p <- samp.mean.p\ndf.trial$EV.p <- EV.p\n\n\n# sliding window plot for RSF\nwindows(height = 22, width = 33)\npar(mfrow = c(2,2))\nfor (cc in 1:4){\n  plot(1, type = \"n\", ylab = \"correct pred RSF\", xlab = \"Trial\", ylim = c(0, 1), xlim = c(w.size, 50),\n       xaxs = \"i\", yaxs = \"i\", main = paste(\"RSF Condition\", cc))\n  n.df<- aggregate(RSF.p ~ participant + trial, FUN = mean, data = subset(df.trial, condition == cc))\n  mean(df.trial$RSF.p[df.trial$participant == 1 & df.trial == 7])\n  for (part in unique(n.df$participant)){\n    lines(7:50, n.df$RSF.p[n.df$participant == part], col = l.cols[cc])\n  }\n  \n  n.df<- aggregate(RSF.p ~ trial, FUN = mean, data = n.df)\n  lines(7:50, n.df$RSF.p, col = l.cols.m[cc], lwd =2)\n\n}\n\n\n# sliding window plot for high sample mean\nwindows(height = 22, width = 33)\npar(mfrow = c(2,2))\nfor (cc in 1:4){\n  plot(1, type = \"n\", ylab = \"correct pred high sample mean\", xlab = \"Trial\", ylim = c(0, 1), xlim = c(w.size, 50), xaxs = \"i\", yaxs = \"i\", main = paste(\"High samp mean Condition\", cc))\n  n.df<- aggregate(samp.mean.p ~ participant + trial, FUN = mean, data = subset(df.trial, condition == cc))\n  mean(df.trial$samp.mean.p[df.trial$participant == 1 & df.trial == 7])\n  for (part in unique(n.df$participant)){\n    lines(7:50, n.df$samp.mean.p[n.df$participant == part], col = l.cols[cc])\n  }\n  \n  n.df<- aggregate(samp.mean.p ~ trial, FUN = mean, data = n.df)\n  lines(7:50, n.df$samp.mean.p, col = l.cols.m[cc], lwd =2)\n  \n}\n\n\n# sliding window plot for high EV chosen\nwindows(height = 22, width = 33)\npar(mfrow = c(2,2))\nfor (cc in 1:4){\n  plot(1, type = \"n\", ylab = \"correct pred high sample mean\", xlab = \"Trial\", ylim = c(0, 1), xlim = c(w.size, 50), xaxs = \"i\", yaxs = \"i\", main = paste(\"High EV Condition\", cc))\n  n.df<- aggregate(EV.p ~ participant + trial, FUN = mean, data = subset(df.trial, condition == cc))\n  mean(df.trial$EV.p[df.trial$participant == 1 & df.trial == 7])\n  for (part in unique(n.df$participant)){\n    lines(7:50, n.df$EV.p[n.df$participant == part], col = l.cols[cc])\n  }\n  \n  n.df<- aggregate(EV.p ~ trial, FUN = mean, data = n.df)\n  lines(7:50, n.df$EV.p, col = l.cols.m[cc], lwd =2)\n  \n}\n\n",
    "created" : 1490594521005.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1944323649",
    "id" : "4FC79A65",
    "lastKnownWriteTime" : 1490621370,
    "last_content_update" : 1490621370405,
    "path" : "C:/Users/Markus/Dropbox/Masterarbeit/eegoals/R/03_issue3.R",
    "project_path" : "R/03_issue3.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
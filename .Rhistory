char.index[temp.game$selection],
char.index[temp.game$selection]))
temp.game$select.opt <- select.opt
# delete the data rows that don't contain usable data (they were
# necessary to create in the experiment code)
temp.game <- temp.game[-which(temp.game$select.opt == "0"),]
# write the data in one plane of the array
all.game.data[,1,ii] <- as.character(temp.game$workerid[1])
all.game.data[,2,ii] <- temp.game$select.opt
all.game.data[,3,ii] <- temp.game$trial
all.game.data[,4,ii] <- temp.game$game
all.game.data[,5,ii] <- temp.game$outcome
all.game.data[,6,ii] <- temp.game$condition
all.game.data[,7,ii] <- temp.game$time
all.game.data[,8,ii] <- temp.game$points.cum
}
# prepare vectors
select <- NULL
switch <- NULL
condit <- NULL
trials <- NULL
point.cum <- NULL
participant <- NULL
games <- NULL
workerids <- NULL
outcomes <- NULL
times <- NULL
goalReached <- NULL
# loop through game data
for (xx in 1:length(list.games)){
# loop through games in the data
for (gam in 1:6){
# store relevant data to later on bind everything to a long dataframe
temp.select <- all.game.data[,2,xx][all.game.data[,4,xx] == gam]
temp.switch <- NA
condi <- all.game.data[1,6,xx]
temp.cond <- condi
points.cum.temp <- all.game.data[,8,xx][all.game.data[,4,xx] == gam]
trial.temp <- all.game.data[,3,xx][all.game.data[,4,xx] == gam]
outcome.temp <- all.game.data[,5,xx][all.game.data[,4,xx] == gam]
gam.temp <- gam
participant.temp <- xx
workerid.s <- as.character(all.game.data[1, 1, xx])
workerid.temp <- workerid.s
time.temp <- all.game.data[,7,xx][all.game.data[,4,xx] == gam]
goal.reached.i <- ifelse(condi %in% 3:4,
ifelse(points.cum.temp[length(points.cum.temp)] >= 135, 1, 0), NA)
goal.reached.temp <- goal.reached.i
# loop through trials in a game
for (sel in 2:length(temp.select)){
temp.switch <- c(temp.switch, ifelse(temp.select[sel-1] == temp.select[sel], 0, 1)) # 1 for switch
temp.cond <- c(temp.cond, condi)
participant.temp <- c(participant.temp, xx)
gam.temp <- c(gam.temp, gam)
workerid.temp <- c(workerid.temp, workerid.s)
goal.reached.temp <- c(goal.reached.temp, goal.reached.i)
}
# append the data to the precreated vectors
select <- c(select, temp.select)
switch <- c(switch, temp.switch)
condit <- c(condit, temp.cond)
trials <- c(trials, trial.temp)
point.cum <- c(point.cum, points.cum.temp)
participant <- c(participant, participant.temp)
games <- c(games, gam.temp)
workerids <- c(workerids, workerid.temp)
outcomes <- c(outcomes, outcome.temp)
times <- c(times, time.temp)
goalReached <- c(goalReached, goal.reached.temp)
}
}
# create a dataframe in long format
df.long <- data.frame(workerids, games, condit, select, switch, trials, outcomes,
point.cum, times, goalReached)
# rename things
names(df.long)
names(df.long) <- c("workerid", "game", "condition", "selection", "switched", "trial",
"outcome", "points.cum", "resp.time", "goalReached")
# create new variable whether participants were, in a given trial, over the goal (1) or not (0)
df.long$overGoal <- NA
df.long$overGoal <- ifelse(df.long$condition %in% 3:4 &
as.numeric(as.character(df.long$points.cum)) >= 135, 1, 0)
# create new variable whether participants in a given trial chose the high variance option
df.long$high.var.chosen <- ifelse(df.long$condition %in% c(1,3),
ifelse(df.long$selection == "3", 1, 0),
ifelse(df.long$selection == "1", 1, 0))
# create new variable whether participants in a given trial chose the high EV option
df.long$highEV <- ifelse(df.long$selection == "1", 1, 0)
df.long$outcome <- as.numeric(as.character(df.long$outcome))
df.long$resp.time <- as.numeric(as.character(df.long$resp.time))
df.long$trial <- as.numeric(as.character(df.long$trial))
df.long$points.cum <- as.numeric(as.character(df.long$points.cum))
saveRDS(df.long, "DataPilotRun3/anonymousData/dataTrialLevel.rds")
# -------------------
# Game Level Dataframe
# -------------------
# aggregate important variables to game level
# again, here be dragons...
aa.switch <- aggregate(formula = switched ~ workerid + game, FUN = mean, data = df.long)
aa.outcome.mean <- aggregate(formula = outcome ~ workerid + game, FUN = mean, data = df.long)
aa.outcome.sum <- aggregate(formula = outcome ~ workerid + game, FUN = sum, data = df.long)
aa.resp.time <- aggregate(formula = resp.time ~ workerid + game, FUN = median, data = df.long)
aa.high.var.chosen <- aggregate(formula = high.var.chosen ~ workerid + game, FUN = mean,
data = df.long)
aa.highEV <- aggregate(formula = highEV ~ workerid + game, FUN = mean, data = df.long)
df.game <- data.frame("workerid" = aa.switch$workerid,
"game" = aa.switch$game,
"mean.switched" = aa.switch$switched,
"outcome.mean" = aa.outcome.mean$outcome,
"outcome.sum" = aa.outcome.sum$outcome,
"resp.time.median" = aa.resp.time$resp.time,
"high.var.chosen.mean" = aa.high.var.chosen$high.var.chosen,
"highEV.mean" = aa.highEV$highEV)
df.game$condition <- NA
for (kk in 1:nrow(df.game)){
df.game$condition[kk] <- df.long$condition[df.long$workerid == df.game$workerid[kk]][1]
}
df.game$goalReached <- ifelse(df.game$condition %in% 3:4,
ifelse(df.game$outcome.sum >= ifelse(df.game$game == 1, 30, 135),
1, 0), NA)
saveRDS(df.game, "DataPilotRun3/anonymousData/dataGameLevel.rds")
# ------------------
# Participant Level Dataframe
# ------------------
# create a participant level dataframe
# aggregate data to participant level
a.switch <- aggregate(formula = switched ~ workerid, FUN = mean, data = df.long)
a.outcome.mean <- aggregate(formula = outcome ~ workerid, FUN = mean, data = df.long)
a.outcome.sum <- aggregate(formula = outcome ~ workerid, FUN = sum, data = df.long)
a.resp.time <- aggregate(formula = resp.time ~ workerid, FUN = median, data = df.long)
a.high.var.chosen <- aggregate(formula = high.var.chosen ~ workerid, FUN = mean, data = df.long)
a.highEV <- aggregate(formula = highEV ~ workerid, FUN = mean, data = df.long)
# create the dataframe
df.participant <- data.frame("workerid" = a.switch$workerid,
"mean.switched" = a.switch$switched,
"outcome.mean" = a.outcome.mean$outcome,
"outcome.sum" = a.outcome.sum$outcome,
"resp.time.median" = a.resp.time$resp.time,
"high.var.chosen.mean" = a.high.var.chosen$high.var.chosen,
"highEV.mean" = a.highEV$highEV)
df.participant$condition <- NA
goalReachedPart <- NULL
# loop through participants
for (kk in 1:nrow(df.participant)){
# save condition
df.participant$condition[kk] <- df.long$condition[df.long$workerid == df.participant$workerid[kk]][1]
# save how often (proportion) a participant in conditions 3 and 4 reached the goal
if (df.participant$condition[kk] %in% 3:4){
goalReachedPart <- c(goalReachedPart, mean(df.game$goalReached[df.game$workerid == df.participant$workerid[kk] & df.game$game > 1]))
} else{
goalReachedPart <- c(goalReachedPart, NA)
}
}
df.participant$goalReached.mean.NP <- goalReachedPart
# read in a survey dataframe as reference
survey.df <- readRDS(list.surveys[1])
# loop through survey dataframes
for (jj in 2:length(list.surveys)){
# read in files and add to prepared dataframe
temp.surv <- readRDS(list.surveys[jj])
survey.df <- rbind(survey.df, temp.surv)
}
# get rid of condition column, it already exists in df.participant
survey.df <- survey.df[, !(names(survey.df) == "condition")]
survey.df$workerid <- as.character(survey.df$workerid)
# sanity check if ids are always the same
mean(df.participant$workerid == survey.df$workerid) == 1
# merge dataframes
df.part <- merge(df.participant, survey.df, by = "workerid")
saveRDS(df.part, "data/dataParticipantLevel.rds")
# ------------------------
# code to generate variable with predictions of Risk
# Sensitivite Foraging Theory (RS)
# ------------------------
library(yarrr)
library(BayesFactor)
# Calculate the probability of earning points.needed points given trials.left, and
#  sampling from a Normal distribution with a given mean and standard deviation
p.getthere.fun <- function(points.needed,  # How many points do I need?
trials.left,     # Trials remaining
mu,             # Mean of distribution(s)
sigma) {        # SD of distribution(s)
n.options <- length(mu)
output <- sapply(1:n.options, FUN = function(x) {
1 - pnorm(q = points.needed,                     # points desired
mean = mu[x] * trials.left,            # Mean
sd = sqrt(trials.left * sigma[x] ^ 2)) # Sd
})
return(output)
}
# here be dragons
# read in trial level file
df.trial <- readRDS("data/dataTrialLevel.rds")
# the first game was a practice game so only look at games > 1
df.trial <- subset(df.trial, game > 1)
# create empty vectors
o1.vec <- NULL
o2.vec <- NULL
o3.vec <- NULL
# these are the means and sds of the distributions of the two environments
mu <- c(3, 2, 2)
sd.l <- c(2, 2.5, 5)
sd.h <- c(5, 2.5, 2)
# loop through trials
for (xx in 1:nrow(df.trial)){
# was the point value in trial xx under the goal of 135
if (df.trial$points.cum[xx] < 135){
# for all three options compute the probability of reaching the
# goal if this option was chosen for the rest of the game
points.needed.i <- 135 - df.trial$points.cum[xx]
trials.left.i <- 50 - df.trial$trial[xx]
# high EV is low variance environment
if (df.trial$condition[xx] %in% c(1,3)){
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu,
sigma = sd.l)
} else {
# high EV is high variance environment
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu,
sigma = sd.h)
}
} else {
# do the same if point value is > the goal
#p.temp <- c(NA, NA, NA)
points.needed.i <- 135 - df.trial$points.cum[xx]
trials.left.i <- 50 - df.trial$trial[xx]
if (df.trial$condition[xx] %in% c(1,3)){
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu,
sigma = sd.l)
} else {
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu,
sigma = sd.h)
}
}
# append probability values to vector
o1.vec <- c(o1.vec, p.temp[1])
o2.vec <- c(o2.vec, p.temp[2])
o3.vec <- c(o3.vec, p.temp[3])
}
# the probabilities were calculated with complete information of points in a trial
# i.e. the obtained probability is the one for the next trial. Thus we have to
# reposition everything by one.
o1.vec <- c(NA, o1.vec)
o2.vec <- c(NA, o2.vec)
o3.vec <- c(NA, o3.vec)
o1.vec <- o1.vec[-length(o1.vec)]
o2.vec <- o2.vec[-length(o2.vec)]
o3.vec <- o3.vec[-length(o3.vec)]
df.trial$p.getthere.1 <- o1.vec
df.trial$p.getthere.2 <- o2.vec
df.trial$p.getthere.3 <- o3.vec
df.trial$p.getthere.1[df.trial$trial == 1] <- NA
df.trial$p.getthere.2[df.trial$trial == 1] <- NA
df.trial$p.getthere.3[df.trial$trial == 1] <- NA
####
# and now for the subjective stuff
###
o1.vec <- NULL
o2.vec <- NULL
o3.vec <- NULL
sub.mean1 <- NULL
sub.mean2 <- NULL
sub.mean3 <- NULL
for (xx in 1:nrow(df.trial)){
if (df.trial$points.cum[xx] < 135){
# for each option get a vector of values the participant has seen so far in the game
m1.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 1]
m2.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 2]
m3.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 3]
# compute mean and sds for this vector
m1 <- ifelse(length(m1.vec) > 0, mean(m1.vec, na.rm = T), 0)
m2 <- ifelse(length(m2.vec) > 0, mean(m2.vec, na.rm = T), 0)
m3 <- ifelse(length(m3.vec) > 0, mean(m3.vec, na.rm = T), 0)
sd1 <- ifelse(length(m1.vec) > 0, sd(m1.vec, na.rm = T), 1)
sd2 <- ifelse(length(m2.vec) > 0, sd(m2.vec, na.rm = T), 1)
sd3 <- ifelse(length(m3.vec) > 0, sd(m3.vec, na.rm = T), 1)
# append to a vector to use later
sub.mean1 <- c(sub.mean1, m1)
sub.mean2 <- c(sub.mean2, m2)
sub.mean3 <- c(sub.mean3, m3)
# compute probabilities with these subjective distributions
mu.i <- c(m1, m2, m3)
sigma.i <- c(sd1, sd2, sd3)
points.needed.i <- 135 - df.trial$points.cum[xx]
trials.left.i <- 50 - df.trial$trial[xx]
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu.i,
sigma = sigma.i)
} else {
#p.temp <- c(NA, NA, NA)
# do the same for over the goal
m1.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 1]
m2.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 2]
m3.vec <- df.trial$outcome[df.trial$participant == df.trial$participant[xx] &
df.trial$game == df.trial$game[xx] &
df.trial$trial <= df.trial$trial[xx] &
df.trial$selection == 3]
m1 <- ifelse(length(m1.vec) > 0, mean(m1.vec, na.rm = T), 0)
m2 <- ifelse(length(m2.vec) > 0, mean(m2.vec, na.rm = T), 0)
m3 <- ifelse(length(m3.vec) > 0, mean(m3.vec, na.rm = T), 0)
sd1 <- ifelse(length(m1.vec) > 0, sd(m1.vec, na.rm = T), 1)
sd2 <- ifelse(length(m2.vec) > 0, sd(m2.vec, na.rm = T), 1)
sd3 <- ifelse(length(m3.vec) > 0, sd(m3.vec, na.rm = T), 1)
sub.mean1 <- c(sub.mean1, m1)
sub.mean2 <- c(sub.mean2, m2)
sub.mean3 <- c(sub.mean3, m3)
mu.i <- c(m1, m2, m3)
sigma.i <- c(sd1, sd2, sd3)
points.needed.i <- 135 - df.trial$points.cum[xx]
trials.left.i <- 50 - df.trial$trial[xx]
p.temp <- p.getthere.fun(points.needed = points.needed.i,
trials.left = trials.left.i,
mu = mu.i,
sigma = sigma.i)
}
o1.vec <- c(o1.vec, p.temp[1])
o2.vec <- c(o2.vec, p.temp[2])
o3.vec <- c(o3.vec, p.temp[3])
}
# reposition by one
o1.vec <- c(NA, o1.vec)
o2.vec <- c(NA, o2.vec)
o3.vec <- c(NA, o3.vec)
o1.vec <- o1.vec[-length(o1.vec)]
o2.vec <- o2.vec[-length(o2.vec)]
o3.vec <- o3.vec[-length(o3.vec)]
df.trial$p.getthere.1.subj <- o1.vec
df.trial$p.getthere.2.subj <- o2.vec
df.trial$p.getthere.3.subj <- o3.vec
df.trial$p.getthere.1.subj[df.trial$trial == 1] <- NA
df.trial$p.getthere.2.subj[df.trial$trial == 1] <- NA
df.trial$p.getthere.3.subj[df.trial$trial == 1] <- NA
# append subjective mean vectors
df.trial$subj.mean.1 <- sub.mean1
df.trial$subj.mean.2 <- sub.mean2
df.trial$subj.mean.3 <- sub.mean3
# prepare objects
choose.highvar <- NULL
choose.highvar.subj <- NULL
for (jj in 1:nrow(df.trial)){
if(df.trial$condition[jj] %in% c(1,3)){
if (df.trial$overGoal[jj] == 0){
# check if it was rational to choose the high variance obtion
choose.highvar <- c(choose.highvar, ifelse(df.trial$p.getthere.3[jj] > df.trial$p.getthere.2[jj] &
df.trial$p.getthere.3[jj] > df.trial$p.getthere.1[jj],
1, 0))
choose.highvar.subj <- c(choose.highvar.subj,
ifelse(df.trial$p.getthere.3.subj[jj] > df.trial$p.getthere.2.subj[jj] &
df.trial$p.getthere.3.subj[jj] > df.trial$p.getthere.1.subj[jj],
1, 0))
} else{
# check if it was rational to choose the high variance obtion
choose.highvar <- c(choose.highvar,
ifelse(df.trial$p.getthere.3[jj] > df.trial$p.getthere.2[jj] &
df.trial$p.getthere.3[jj] > df.trial$p.getthere.1[jj], 1, 0))
choose.highvar.subj <- c(choose.highvar.subj,
ifelse(df.trial$p.getthere.3.subj[jj] > df.trial$p.getthere.2.subj[jj] &
df.trial$p.getthere.3.subj[jj] > df.trial$p.getthere.1.subj[jj],
1, 0))
}
} else{
if (df.trial$overGoal[jj] == 0){
# check if it was rational to choose the high variance obtion
choose.highvar <- c(choose.highvar, ifelse(df.trial$p.getthere.1[jj] > df.trial$p.getthere.2[jj] &
df.trial$p.getthere.1[jj] > df.trial$p.getthere.3[jj],
1, 0))
choose.highvar.subj <- c(choose.highvar.subj,
ifelse(df.trial$p.getthere.1.subj[jj] > df.trial$p.getthere.2.subj[jj] &
df.trial$p.getthere.1.subj[jj] > df.trial$p.getthere.3.subj[jj],
1, 0))
} else{
# check if it was rational to choose the high variance obtion
choose.highvar <- c(choose.highvar, ifelse(df.trial$p.getthere.1[jj] > df.trial$p.getthere.2[jj] &
df.trial$p.getthere.1[jj] > df.trial$p.getthere.3[jj],
1, 0))
choose.highvar.subj <- c(choose.highvar.subj,
ifelse(df.trial$p.getthere.1.subj[jj] > df.trial$p.getthere.2.subj[jj] &
df.trial$p.getthere.1.subj[jj] > df.trial$p.getthere.3.subj[jj],
1, 0))
}
}
}
df.trial$choose.highvar <- choose.highvar
df.trial$choose.highvar.subj <- choose.highvar.subj
saveRDS(df.trial, "data/dataTrialLevelPGetthere.rds")
# THE REST IS OLD CODE
## check condition 3
#n.df1 <- aggregate(high.var.chosen ~ choose.highvar + participant + game, FUN = mean, data = subset(df.trial, condition #== 3 & trial >= 40))
#names(n.df1)
#pirateplot(high.var.chosen ~ choose.highvar, data = n.df1, ylab = "p high var option chosen", main = "Prop high variance #chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df1)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df1))
#
#
## aaaand subjective
#n.df1.s <- aggregate(high.var.chosen ~ choose.highvar + participant + game, FUN = mean, data = subset(df.trial, condition #== 3 & trial >= 40))
#names(n.df1.s)
#pirateplot(high.var.chosen ~ choose.highvar, data = n.df1.s, ylab = "p high var option chosen", main = "Prop high #variance chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df1.s)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df1.s))
#
#
#### check condiiton 1
#n.df2 <- aggregate(high.var.chosen ~ choose.highvar + participant + game, FUN = mean, data = subset(df.trial, condition #== 1 & trial >= 40))
#names(n.df2)
#pirateplot(high.var.chosen ~ choose.highvar, data = n.df2, ylab = "p high var option chosen", main = "Prop high variance #chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df2)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df2))
#
## aaaand subjective
#n.df2.s <- aggregate(high.var.chosen ~ choose.highvar.subj + participant + game, FUN = mean, data = subset(df.trial, #condition == 1 & trial >= 40))
#names(n.df2.s)
#pirateplot(high.var.chosen ~ choose.highvar.subj, data = n.df2.s, ylab = "p high var option chosen", main = "Prop high #variance chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df2.s)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df2.s))
#
#### check condiiton 4
#n.df3 <- aggregate(high.var.chosen ~ choose.highvar + participant + game, FUN = mean, data = subset(df.trial, condition #== 4 & trial >= 40))
#names(n.df3)
#pirateplot(high.var.chosen ~ choose.highvar, data = n.df3, ylab = "p high var option chosen", main = "Prop high variance #chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df3)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df3))
#
#### check condiiton 2
#n.df4 <- aggregate(high.var.chosen ~ choose.highvar + participant + game, FUN = mean, data = subset(df.trial, condition #== 2 & trial >= 40))
#names(n.df4)
#pirateplot(high.var.chosen ~ choose.highvar, data = n.df4, ylab = "p high var option chosen", main = "Prop high variance #chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ choose.highvar, data = n.df4)
#plot(generalTestBF(high.var.chosen ~ choose.highvar, data = n.df4))
#
#
#
#
#
## create subset
#df.trial.n <- subset(df.trial, trial > 30 & condition == 3 & overGoal == 0 & game > 1)
#
## compute the point value from which on it is rational to choose the low EV but high variance
## option
#vals <- seq(0, 6, .001)
#hEV <- pnorm(vals , mean = 3, sd = 2, lower.tail = FALSE)
#hVAR <- pnorm(vals , mean = 2, sd = 5, lower.tail = FALSE)
#
#vals[which(hVAR > hEV)[1]]
#vals[which((hVAR*hVAR) > (hEV * hEV))[1]]
#vals[which((hVAR ^ 3) > (hEV ^ 3))[1]]
#
#135/50
#50 * 3.667
#pnorm(185, 2,5, lower.tail = F) > pnorm(185, 3,2, lower.tail = F)
#
#
## compute the value needed in each trial (i.e. the smallest value that, if multiplied by the number
## of trials left lets you reache the goal)
#df.trial.n$meanValNeeded <- (135 - df.trial.n$points.cum) / (50 - df.trial.n$trial)
#df.trial.n$meanValNeeded[df.trial.n$meanValNeeded == Inf] <- NA
#hist(df.trial.n$meanValNeeded)
#
## check if value was greater or smaller than 3.667, the value computed before
#new.vec <- c(NA, ifelse(df.trial.n$meanValNeeded >= 3.667, 1, 0))
#new.vec <- new.vec[-length(new.vec)]
#df.trial.n$highVarBetter <- new.vec
#
## get the mean rates of high var options chosen separated for whether this was the rational strategy
## or not
#n.df <- aggregate(high.var.chosen ~ highVarBetter + participant + game, FUN = mean, data = df.trial.n)
#names(n.df)
#pirateplot(high.var.chosen ~ highVarBetter, data = n.df, ylab = "p high var option chosen", main = "Prop high variance #chosen when rational vs not")
#
#
#generalTestBF(high.var.chosen ~ highVarBetter, data = n.df)
#plot(generalTestBF(high.var.chosen ~ highVarBetter, data = n.df))
#
#
View(survey.df)
rm(list=ls())
gc()

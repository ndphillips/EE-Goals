# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
gt.v
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
current.points
points.needed
tail(df)
dim(df)
View(df)
df <- subset(df.trial, workerid == 2 & game == 3)
View(df)
df <- subset(df.trial, workerid == 3 & game == 3)
df
df <- subset(df.trial, workerid == 3 & game == 3)
gt.start = .5
mean.start = 0
sd.start = 10
n.options = 3
goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
}
head(df)
tail(df)
df <- subset(df.trial, workerid == 3 & game == 3)
gt.start = .5
mean.start = 0
sd.start = 10
n.options = 3
goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
current.selection <- df$selection[trial.i]
option.hmean <- which(mean.v == max(mean.v))
option.hsd <- which(mean.v == max(sd.v))
option.hrsf <- which(gt.v == max(gt.v))
select.hmean <- current.selection %in% option.hmean
select.hsd <- current.selection %in% option.hsd
select.rsf <- current.selection %in% option.hrsf
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
df$select.hmean[trial.i] <- select.hmean
df$select.hsd[trial.i] <- select.hsd
df$select.rsf[trial.i] <- select.rsf
}
df
head(df)
trial.i <- 49
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
mean.v
sd.v
gt.v
df$selection[trial.i]
View(df)
add.exp.data <- function(df,
mean.start = 0,
sd.start = 10,
gt.start = .5,
n.options = 3,
goal = 130, trials.max = ) {
# df <- subset(df.trial, workerid == 3 & game == 3)
# gt.start = .5
# mean.start = 0
# sd.start = 10
# n.options = 3
# goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
current.selection <- df$selection[trial.i]
option.hmean <- which(mean.v == max(mean.v))
option.hsd <- which(mean.v == max(sd.v))
option.hrsf <- which(gt.v == max(gt.v))
select.hmean <- current.selection %in% option.hmean
select.hsd <- current.selection %in% option.hsd
select.rsf <- current.selection %in% option.hrsf
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
df$select.hmean[trial.i] <- select.hmean
df$select.hsd[trial.i] <- select.hsd
df$select.rsf[trial.i] <- select.rsf
}
return(df)
}
parts <- expand.grid(workerid = unique(df.trial$workerid), game = unique(df.trial$game))
dim(parts)
head(parts)
# Set working directory
setwd(rprojroot::is_rstudio_project$find_file())
source("r/learning_functions.R")
df.trial <- readRDS("data/dataTrialLevel.rds")
# Add experienced SD and Mean
add.exp.data <- function(df,
mean.start = 0,
sd.start = 10,
gt.start = .5,
n.options = 3,
goal = 130, trials.max = ) {
# df <- subset(df.trial, workerid == 3 & game == 3)
# gt.start = .5
# mean.start = 0
# sd.start = 10
# n.options = 3
# goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
current.selection <- df$selection[trial.i]
option.hmean <- which(mean.v == max(mean.v))
option.hsd <- which(mean.v == max(sd.v))
option.hrsf <- which(gt.v == max(gt.v))
select.hmean <- current.selection %in% option.hmean
select.hsd <- current.selection %in% option.hsd
select.rsf <- current.selection %in% option.hrsf
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
df$select.hmean[trial.i] <- select.hmean
df$select.hsd[trial.i] <- select.hsd
df$select.rsf[trial.i] <- select.rsf
}
return(df)
}
parts <- expand.grid(workerid = unique(df.trial$workerid), game = unique(df.trial$game))
x <- lapply(1:nrow(parts), FUN = function(x) {
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
add.exp.data(df)
})
# Set working directory
setwd(rprojroot::is_rstudio_project$find_file())
source("r/learning_functions.R")
df.trial <- readRDS("data/dataTrialLevel.rds")
# Add experienced SD and Mean
add.exp.data <- function(df,
mean.start = 0,
sd.start = 10,
gt.start = .5,
n.options = 3,
goal = 130, trials.max = 50) {
# df <- subset(df.trial, workerid == 3 & game == 3)
# gt.start = .5
# mean.start = 0
# sd.start = 10
# n.options = 3
# goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
current.selection <- df$selection[trial.i]
option.hmean <- which(mean.v == max(mean.v))
option.hsd <- which(mean.v == max(sd.v))
option.hrsf <- which(gt.v == max(gt.v))
select.hmean <- current.selection %in% option.hmean
select.hsd <- current.selection %in% option.hsd
select.rsf <- current.selection %in% option.hrsf
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
df$select.hmean[trial.i] <- select.hmean
df$select.hsd[trial.i] <- select.hsd
df$select.rsf[trial.i] <- select.rsf
}
return(df)
}
parts <- expand.grid(workerid = unique(df.trial$workerid), game = unique(df.trial$game))
x <- lapply(1:nrow(parts), FUN = function(x) {
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
add.exp.data(df)
})
# Set working directory
setwd(rprojroot::is_rstudio_project$find_file())
source("r/learning_functions.R")
df.trial <- readRDS("data/dataTrialLevel.rds")
# Add experienced SD and Mean
add.exp.data <- function(df,
mean.start = 0,
sd.start = 10,
gt.start = .5,
n.options = 3,
goal = 130, trials.max = 50) {
# df <- subset(df.trial, workerid == 3 & game == 3)
# gt.start = .5
# mean.start = 0
# sd.start = 10
# n.options = 3
# goal = 130
mean.v <- rep(mean.start, n.options)
sd.v <- rep(sd.start, n.options)
gt.v <- rep(.5, n.options)
df[c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- NA
df[1, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options))] <- c(mean.v, sd.v, gt.v)
for(trial.i in 2:nrow(df)) {
# Get data up to current trial
df.now <- df[1:(trial.i - 1), ]
# Calculate running mean and sd for each option
mean.v <- sapply(1:n.options, FUN = function(x) {mean(subset(df.now, selection == x)$outcome)})
sd.v <- sapply(1:n.options, FUN = function(x) {sd(subset(df.now, selection == x)$outcome)})
# Calculate p.getthere for each option
gt.v <- sapply(1:n.options, FUN = function(x) {
current.points <- df.now$points.cum[trial.i - 1]
points.needed <- goal - current.points
p.getthere.fun(points.needed = points.needed, trials.left = 50 - trial.i, mu = mean.v[x], sigma = sd.v[x])
})
mean.v[is.finite(mean.v) == FALSE] <- mean.start
sd.v[is.finite(sd.v) == FALSE] <- sd.start
gt.v[is.finite(gt.v) == FALSE] <- gt.start
current.selection <- df$selection[trial.i]
option.hmean <- which(mean.v == max(mean.v))
option.hsd <- which(mean.v == max(sd.v))
option.hrsf <- which(gt.v == max(gt.v))
select.hmean <- current.selection %in% option.hmean
select.hsd <- current.selection %in% option.hsd
select.rsf <- current.selection %in% option.hrsf
df[trial.i, c(paste0("mean.", 1:n.options), paste0("sd.", 1:n.options), paste0("gt.", 1:n.options) )] <- c(mean.v, sd.v, gt.v)
df$select.hmean[trial.i] <- select.hmean
df$select.hsd[trial.i] <- select.hsd
df$select.rsf[trial.i] <- select.rsf
}
return(df)
}
parts <- expand.grid(workerid = unique(df.trial$workerid), game = unique(df.trial$game))
x <- 1
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
add.exp.data(df)
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
df
parts$workerid[x]
parts$game[x]
parts <- expand.grid(workerid = unique(df.trial$workerid), game = unique(df.trial$game), stringsAsFactors = FALSE)
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
df
x
parts$workerid[x]
parts <- expand.grid(workerid = unique(paste(df.trial$workerid)),
game = unique(df.trial$game),
stringsAsFactors = FALSE)
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
df
head(parts)
x
parts$workerid[x],
parts$workerid[x]
parts <- expand.grid(workerid = as.numeric(unique(paste(df.trial$workerid))),
game = unique(df.trial$game),
stringsAsFactors = FALSE)
df <- subset(df.trial, workerid == parts$workerid[x], game == parts$game[x])
df
parts$workerid[x]
parts$game[x]
head(df.trial)
subset(df.trial, workerid == 1)
subset(df.trial, workerid == 1 & game == 1)
ubset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
subset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
df <- subset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
df
add.exp.data(df)
parts <- expand.grid(workerid = as.numeric(unique(paste(df.trial$workerid))),
game = unique(df.trial$game),
stringsAsFactors = FALSE)
x <- lapply(1:20, FUN = function(x) {
df <- subset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
add.exp.data(df)
})
df.new <- do.call(rbind, args = x)
dim(df.new)
head(df.new)
parts <- expand.grid(workerid = as.numeric(unique(paste(df.trial$workerid))),
game = unique(df.trial$game),
stringsAsFactors = FALSE)
x <- lapply(1:100, FUN = function(x) {
df <- subset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
add.exp.data(df)
})
df.new <- do.call(rbind, args = x)
dim(df.new)
parts <- expand.grid(workerid = as.numeric(unique(paste(df.trial$workerid))),
game = unique(df.trial$game),
stringsAsFactors = FALSE)
x <- lapply(1:nrow(parts), FUN = function(x) {
df <- subset(df.trial, workerid == parts$workerid[x] & game == parts$game[x])
add.exp.data(df)
})
df.new <- do.call(rbind, args = x)
head(df.new)
with(df, mean(select.rsf == select.hmean, na.rm = TRUE))
with(df.new, mean(select.rsf == select.hmean, na.rm = TRUE))
with(df.new, mean(select.rsf, na.rm = TRUE))
with(df.new, mean(select.hmean, na.rm = TRUE))
head(df.new)
library(dplyr)
agg <- df.new %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
)
agg
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1))
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 40) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
head(df.new)
agg <- df.new %>% filter(game > 1 & trial > 40 & overGoal == 0) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 40 & overGoal == 1) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 40 & overGoal == 0) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 40 & overGoal == 1) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 45 & overGoal == 1) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.hmean.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
agg <- df.new %>% filter(game > 1 & trial > 45 & overGoal == 0) %>% group_by(workerid) %>% summarise(
condition = condition[1],
select.hmean.mean = mean(select.hmean, na.rm = TRUE),
select.rsf.mean = mean(select.rsf, na.rm = TRUE),
N = n()
) %>% mutate(
hmean.v.rsf = select.hmean.mean - select.rsf.mean
)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
yarrr::pirateplot(hmean.v.rsf ~ condition, data = agg, ylim = c(-1, 1), cap.beans = TRUE)
yarrr::pirateplot(select.rsf.mean ~ condition, data = agg, ylim = c(0, 1), cap.beans = TRUE)
